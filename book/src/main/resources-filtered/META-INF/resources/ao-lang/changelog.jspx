<?xml version="1.0" encoding="UTF-8"?>
<!--
ao-lang - Minimal Java library with no external dependencies shared by many other projects.
Copyright (C) 2017, 2018, 2019  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of ao-lang.

ao-lang is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ao-lang is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ao-lang.  If not, see <http://www.gnu.org/licenses />.
-->
<jsp:root
	xmlns:ao="https://aoindustries.com/ao-taglib/"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:changelog="https://semanticcms.com/changelog/taglib/"
	xmlns:core="https://semanticcms.com/core/taglib/"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:jsp="http://java.sun.com/JSP/Page"
	version="2.1"
>
	<jsp:directive.page language="java" pageEncoding="UTF-8" session="false" />
	<core:page
		title="@{documented.name} Changelog"
		shortTitle="Changelog"
		tocLevels="1"
		datePublished="2017-03-12T17:54:37-0500"
		dateModified="2019-06-19T05:13:30-0500"
	>
		<!-- The current snapshot, unreleased version -->
		<c:set var="version" value="@{com.aoindustries:ao-lang:pom.version}" />
		<ao:assert
			test="${!fn:startsWith(version, '@')}"
			message="Version not substituted: #{version}"
		/>
		<c:if test="${fn:endsWith(version, '-SNAPSHOT') and !fn:endsWith(version, '-validation-SNAPSHOT')}">
			<changelog:release
				projectName="@{documented.name}"
				version="#{version}"
				groupId="@{documented.groupId}"
				artifactId="@{documented.artifactId}"
				scmUrl="@{documented.scm.url}"
			/>
		</c:if>

		<changelog:release
			projectName="@{documented.name}"
			version="2.1.0"
			datePublished="2019-06-19T05:13:30-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>
					New method <ao:a href="apidocs/com/aoindustries/math/SafeMath.html#castShort-long-">SafeMath.castShort(long)</ao:a>
					to safely cast from <code>long</code> to <code>short</code> with bounds checks.
				</li>
				<li>Using managed dependencies:
					<ol>
						<li>This project uses transitive managed dependencies.</li>
						<li>This project's managed dependencies may also be imported by other projects.</li>
					</ol>
				</li>
				<li>Resolved Javadoc warnings.</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="2.0.0"
			datePublished="2019-04-18T04:24:04-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Minimum Java version changed from 1.6 to 1.7.</li>
				<li>
					Deprecated <ao:a href="apidocs/com/aoindustries/io/FileUtils.html#getFile-java.net.URL-java.lang.String-boolean-">FileUtils.getFile(URL url, String urlEncoding, boolean deleteOnExit)</ao:a>
					in favor of new <ao:a href="https://aoindustries.com/ao-tempfiles/apidocs/com/aoindustries/tempfiles/TempFileContext.html">TempFileContext</ao:a>
					that does not suffer from a memory leak in long-running applications.
				</li>
				<li>New class <ao:a href="apidocs/com/aoindustries/locale/CallableE.html">CallableE</ao:a> for callables with parameterized exceptions.</li>
				<li>New methods in <ao:a href="apidocs/com/aoindustries/util/i18n/ThreadLocale.html">ThreadLocale</ao:a>
					to support <ao:a href="apidocs/com/aoindustries/locale/CallableE.html">CallableE</ao:a>
					or <ao:a href="apidocs/com/aoindustries/util/i18n/ThreadLocale.Supplier.html">ThreadLocale.Supplier</ao:a>.
				</li>
				<li>New localizable exceptions:
					<ul>
						<li><ao:a href="apidocs/com/aoindustries/text/LocalizedParseException.html">LocalizedParseException</ao:a></li>
						<li><ao:a href="apidocs/com/aoindustries/util/concurrent/LocalizedTimeoutException.html">LocalizedTimeoutException</ao:a></li>
					</ul>
				</li>
				<li>
					<ao:a href="apidocs/com/aoindustries/util/MinimalList.html">MinimalList</ao:a> now represents
					an empty list as using <ao:a rel="nofollow" href="@{javac.link.javaApi}java/util/Collections.html#emptyList()">Collections.emptyList()</ao:a>
					instead of <code>null</code>.
				</li>
				<li>
					<ao:a href="apidocs/com/aoindustries/util/MinimalMap.html">MinimalMap</ao:a> now represents
					an empty map as using <ao:a rel="nofollow" href="@{javac.link.javaApi}java/util/Collections.html#emptyMap()">Collections.emptyMap()</ao:a>
					instead of <code>null</code>.
				</li>
				<li>
					New methods in <ao:a href="apidocs/com/aoindustries/util/AoCollections.html">AoCollections</ao:a> to assist
					in efficiently converting <ao:a rel="nofollow" href="@{javac.link.javaApi}java/lang/Iterable.html">Iterable</ao:a>
					to different types of <ao:a rel="nofollow" href="@{javac.link.javaApi}java/util/Collection.html">Collection</ao:a>.
				</li>
				<li>
					<p>
						Deprecating methods in favor of <ao:a href="https://commons.apache.org/proper/commons-lang/">Apache Commons Lang</ao:a>
						and <ao:a href="https://commons.apache.org/proper/commons-collections/">Apache Commons Collections</ao:a> where
						functionality is redundant.
					</p>
					<p>
						This does not introduce any runtime dependency on <code>commons-lang</code> or <code>commons-collections</code>.
						The dependencies are both <code><![CDATA[&lt;optional /&gt;]]></code> and <code><![CDATA[&lt;provided /&gt;]]></code>
						because they are only used for javadoc <code>@link</code> and <code>@see</code> generation.
					</p>
					<p>
						This is not an exhaustive search for redundant behavior.
						We will identify and deprecate over time as we go.
					</p>
				</li>
				<li>
					New methods in <ao:a href="apidocs/com/aoindustries/math/SafeMath.html">SafeMath</ao:a> to handle
					multiple values via varargs.
				</li>
				<li>
					New class <ao:a href="apidocs/com/aoindustries/lang/reflect/Classes.html">Classes</ao:a> to help when
					dealing with <ao:a rel="nofollow" href="@{javac.link.javaApi}java/lang/Class.html">Class</ao:a>.
				</li>
				<li>
					New classes <ao:a href="apidocs/com/aoindustries/util/PolymorphicRegistry.html">PolymorphicRegistry</ao:a>
					and <ao:a href="apidocs/com/aoindustries/util/PolymorphicMultimap.html">PolymorphicMultimap</ao:a>
					supporting efficient registration of objects and looking up instances by their class, or any
					parent class and interface they implement.  Optimized for high concurrency lookups in O(1) time.
				</li>
			</ul>
		</changelog:release>

		<changelog:release
			projectName="@{documented.name}"
			version="1.0.0"
			datePublished="2017-07-19T18:05:40-0500"
			groupId="@{documented.groupId}"
			artifactId="@{documented.artifactId}"
			scmUrl="@{documented.scm.url}"
		>
			<ul>
				<li>Pulling small, general-purpose extensions to the standard Java libraries out of
					<core:link book="/aocode-public" page="/index.jspx" /> into a new
					<core:link page="index.jspx" /> project.</li>
				<li>New <code>AoArrays.sortParallelArrays</code> method to sort parallel arrays.</li>
				<li><code>ProcessResult</code> improvements:
					<ol>
						<li><code>exec</code> method now allows varargs.</li>
						<li>Now uses only one additional thread to read standard error.</li>
						<li>Delays the allocation of <code>StringBuilder</code> objects until needed.</li>
						<li>Provides an appropriate starting buffer size to the <code>StringBuilder</code> objects.</li>
						<li>Reduces the amount of <code>synchronization</code>.</li>
					</ol>
				</li>
				<li><code>BufferManager</code> improvements:
					<ol>
						<li>Uses soft references to avoid potential runaway memory leaks.</li>
						<li>Provides additional statistics including the number of buffers zero-filled and detected as garbage collected.</li>
						<li>Javadoc comment improvements.</li>
					</ol>
				</li>
				<li><code>ApplicationResourcesAccessor</code> improvements:
					<ol>
						<li>Added <code>Listener</code> hook for code interested in calls to <code>getMessage</code>.</li>
						<li>Used this new hook to decouple <core:link page="index.jspx" /> from <core:link book="/aocode-public" page="/index.jspx" />.</li>
					</ol>
				</li>
				<li><code>FastObjectOutput</code> improvements:
					<ol>
						<li><code>writeFastUTF</code> compares strings with <code>.equals</code> to find all duplicates.</li>
						<li>Removed internal quick-scan arrays. We've learned to not underestimate the performance of <code>HashMap</code>.</li>
						<li>Improved Javadocs.</li>
					</ol>
				</li>
				<li><code>FastObjectInput</code> improvements:
					<ol>
						<li>Improved Javadocs.</li>
					</ol>
				</li>
				<li>Also moving some of the small, general-purpose extensions to the standard Java libraries out of
					<core:link book="/aoserv/client" page="/index.jspx" /> into this new
					<core:link page="index.jspx" /> project.
				</li>
				<li><code>AoCollections</code> improvements:
					<ol>
						<li>New <code>filterByValue</code> methods to get the key set from maps for all entries matching a given value.</li>
						<li><code>unmodifiableCopy*</code> methods allow wider generic bounds for more versatility.</li>
						<li><code>optimalUnmodifiable*</code> methods allow wider generic bounds for more versatility.</li>
						<li><code>unmodifiableIterator</code> method allows wider generic bounds for more versatility.</li>
						<li><code>filter</code> method allows wider generic bounds for more versatility.</li>
						<li><code>filterByValue</code> methods allow wider generic bounds for more versatility.</li>
					</ol>
				</li>
				<li>New method <code>XmlUtils.getChildTextContent(Element, String)</code> to get child text content with a one-liner.</li>
				<li>New method <code>FileUtils.readFileAsString(File, Charset)</code> to provide the character set when reading a file into a string.</li>
				<li>New localized exception <code>LocalizedIllegalStateException</code>.</li>
				<li>Updated dependencies.</li>
			</ul>
		</changelog:release>
	</core:page>
</jsp:root>
